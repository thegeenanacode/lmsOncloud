package com.lmsoncloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EnrollmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAllPropertiesEquals(Enrollment expected, Enrollment actual) {
        assertEnrollmentAutoGeneratedPropertiesEquals(expected, actual);
        assertEnrollmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAllUpdatablePropertiesEquals(Enrollment expected, Enrollment actual) {
        assertEnrollmentUpdatableFieldsEquals(expected, actual);
        assertEnrollmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAutoGeneratedPropertiesEquals(Enrollment expected, Enrollment actual) {
        assertThat(expected)
            .as("Verify Enrollment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentUpdatableFieldsEquals(Enrollment expected, Enrollment actual) {
        assertThat(expected)
            .as("Verify Enrollment relevant properties")
            .satisfies(e -> assertThat(e.getEnrollmentDate()).as("check enrollmentDate").isEqualTo(actual.getEnrollmentDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentUpdatableRelationshipsEquals(Enrollment expected, Enrollment actual) {
        assertThat(expected)
            .as("Verify Enrollment relationships")
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()))
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()));
    }
}
