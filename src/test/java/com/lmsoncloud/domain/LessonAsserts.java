package com.lmsoncloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LessonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonAllPropertiesEquals(Lesson expected, Lesson actual) {
        assertLessonAutoGeneratedPropertiesEquals(expected, actual);
        assertLessonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonAllUpdatablePropertiesEquals(Lesson expected, Lesson actual) {
        assertLessonUpdatableFieldsEquals(expected, actual);
        assertLessonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonAutoGeneratedPropertiesEquals(Lesson expected, Lesson actual) {
        assertThat(expected)
            .as("Verify Lesson auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonUpdatableFieldsEquals(Lesson expected, Lesson actual) {
        assertThat(expected)
            .as("Verify Lesson relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getVideoUrl()).as("check videoUrl").isEqualTo(actual.getVideoUrl()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonUpdatableRelationshipsEquals(Lesson expected, Lesson actual) {
        assertThat(expected)
            .as("Verify Lesson relationships")
            .satisfies(e -> assertThat(e.getModule()).as("check module").isEqualTo(actual.getModule()));
    }
}
